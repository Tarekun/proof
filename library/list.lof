# This file is part of the LoF standard library
# It contains list basics implemented

import "library/nat"

!theory_block cic
inductive List (T: TYPE) : TYPE {
  | nil: List T 
  | cons: T -> List T -> List T
}
!end_block

fun rec len (T: TYPE) (l: List T) : Nat {
  match l with 
  | nil => z,
  | cons e ll => s (len T ll),
}

# this doesnt pass because A!=T and nil constructs a List T instead of List A
#fun map (A: TYPE) (B: TYPE) (l: List A) (mapper: A -> B) : List B {
#  match l with
#  | nil A => nil B,
#  | cons A e ll => cons B (mapper e) (map A B ll mapper),
#}
