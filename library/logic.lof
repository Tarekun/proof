# This file is part of the LoF standard library
# It contains logic basics implemented in the Calculus of Constructions (CIC)

#TODO in matita T is defined at Type[2]
inductive Eq (T:TYPE) (x:T) : T -> PROP {
  | refl: Eq T x x
}

inductive True: PROP {
  | it: True
}
inductive False: PROP {}

# if i make a proof that by assuming P i can construct False 
# then i constructed a proof of Not P
inductive Not (P: PROP): PROP {
  | notcon: (P -> False) -> Not P
}

# if i make a proof of P and a proof of Q
# then i constructed a proof of And P Q
inductive And (P: PROP) (Q: PROP) : PROP {
  | conj: P -> Q -> And P Q
}
# to construct a proof of Or P Q i can either
# make a proof of P and use left
# make a proof of Q and use right
inductive Or (P: PROP) (Q: PROP) : PROP {
  | left: P -> Or P Q
  | right: Q -> Or P Q
}
# if i make a proof of P t for some term t:T and predicate P 
# then i constructed a proof that Exists T P 
# in matita T is at Type[0]
inductive Exists (T: TYPE) (P: T -> PROP) : PROP {
  | excon: Î t:T. (P t) -> ((Exists T) P)
}

#available once alpha rename is supported in unification check
#let iff: PROP -> PROP -> PROP :=
#  \lambda P: PROP. \lambda Q: PROP.
#    (And (P -> Q)) (Q -> P)
#;

#let decidable: PROP -> PROP :=
#  \lambda P: PROP. (Or P) (Not P)
#;
